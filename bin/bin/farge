#!/usr/bin/env bash
# ┌─┐┌─┐┬─┐┌─┐┌─┐
# ├┤ ├─┤├┬┘│ ┬├┤
# ┴  ┴ ┴┴└─└─┘└─┘
# Created by Siddharth Dushantha
#
# Dependencies:
#    bash
#    imagemagick
#    feh (Other: mpv or sxiv, but you must specify it using the --image-viewer flag)
#
#  If you use X11
#    colorpicker (https://github.com/ym1234/colorpicker)
#
#  If you use Wayland
#    slurp (https://wayland.emersion.fr/slurp)
#    grim (https://wayland.emersion.fr/grim)
#    wl-copy (https://github.com/bugaevc/wl-clipboard)


VERSION="1.0.6"
DIR=/tmp/farge/
MSG=$HOME/.cache/farge.msg

COLOR_TYPE="hex"
WRITE_COLOR_CODE=true
PREVIEW=true
IMAGE_VIEWER="feh"
STDOUT=false


show_help() {
    echo "usage: farge [-h] [--no_preview] [--no_color_code] [--rbg]  [--version]"
    echo " "
    echo "┌─┐┌─┐┬─┐┌─┐┌─┐"
    echo "├┤ ├─┤├┬┘│ ┬├┤ "
    echo "┴  ┴ ┴┴└─└─┘└─┘"
    echo "Click on a pixel on your screen and show its color value"
    echo ""
    echo "optional arguments:"
    echo "   --help                show this help message and exit"
    echo "   --no-preview          dont show the selected color in a preview window"
    echo "   --no-color-code       dont write the color code on the preview window"
    echo "   --rgb                 show the color code as RGB instead of HEX"
    echo "   --image-viewer        image viewer to use to show the preview (feh, mpv, sxiv)"
    echo "   --stdout              output the color value to stdout"
    echo "   --version             show the version of farge you are using"
}


hex_to_rgb() {
    # Convert a hex value WITHOUT the hashtag (#)
    R=$(printf "%d" 0x${1:0:2})
    G=$(printf "%d" 0x${1:2:2})
    B=$(printf "%d" 0x${1:4:2})
}


check_dependencies() {
    # Only check colorpicker if it's running in X,else check for slurp and grim
    if [ "$WAYLAND_DISPLAY" ]; then
        CHECK_SLURP=$(command -v slurp)
        CHECK_GRIM=$(command -v grim)
        CHECK_CB=$(command -v wl-copy)
        [[ ${#CHECK_CB} -eq 0 ]] && echo "wl-copy needs to be installed: https://github.com/bugaevc/wl-clipboard" && exit
        [[ ${#CHECK_SLURP} -eq 0 ]] && echo "slurp needs to be installed: https://wayland.emersion.fr/slurp/" && exit
        [[ ${#CHECK_GRIM} -eq 0 ]] && echo "grim need to be installed: https://wayland.emersion.fr/grim/" && exit
    else
        CHECK_COLORPICKER=$(command -v colorpicker)
        [[ ${#CHECK_COLORPICKER} -eq 0 ]] && echo "colorpicker need to be installed: https://github.com/ym1234/colorpicker" && exit
    fi
    
    CHECK_IMAGEMAGICK=$(command -v convert)
    # We are using the variable $image_viewer because we also have to check if
    # the image viewer the user has told us to use actually exists.
    CHECK_IMAGE_VIEWER=$(command -v $IMAGE_VIEWER)
    
    [[ ${#CHECK_IMAGEMAGICK} -eq 0 ]] && echo "imagemagick needs to be installed" && exit
    [[ ${#CHECK_IMAGE_VIEWER} -eq 0 ]] && echo "$IMAGE_VIEWER needs to be installed or use another image by using --image-viewer <name>" && exit
}


# Caclulate math equations with decimals. This is better than $(())
calc(){ awk "BEGIN { print $*}"; }


calculate_text_color(){
    # I dont even know why this equation works
    # Source: https://stackoverflow.com/a/3943023
    INTENSITY=$(calc "$R*0.299 + $G*0.587 + $B*0.114")
    
    if [ $(echo "$INTENSITY>186" | bc) -eq 1 ]; then
        TEXT_COLOR="#000000"
    else
        TEXT_COLOR="#FFFFFF"
    fi
}


main() {
    if [ "$WAYLAND_DISPLAY" ]; then
        HEX_COLOR=$(grim -g "$(slurp -p)" -t ppm - | convert - -format '%[pixel:p{0,0}]' txt:- | tail -1 | grep '#' | awk '{print $3}')
    else
        HEX_COLOR=$(colorpicker -doq)
    fi
    
    # If no color is chosen, then exit
    [[ ${#HEX_COLOR} -eq 0 ]] && echo "No color was selected" && exit
    
    mkdir -p $DIR
    
    # Combine the dir and hex color code to form the file name
    FNAME=$DIR/$HEX_COLOR.png
    
    # Remove the hashtag
    HEX="${HEX_COLOR//\#/}"

    hex_to_rgb $HEX

    # If the baground is dark, then use white as the text color.
    # If the background is light, then use a dark text color.
    calculate_text_color
    
    # Create a 100x100 image, filled with the selected color
    convert -size 100x100 xc:$HEX_COLOR $FNAME
    if [ $WRITE_COLOR_CODE == true ]; then
        COLOR_CODE=$HEX_COLOR
        
        [ $COLOR_TYPE == "rgb" ] && COLOR_CODE="($R,$G,$B)"
        
        # Write the color code in the center of the image
        convert $FNAME -gravity Center -pointsize 10 -fill $TEXT_COLOR -annotate 0 "$COLOR_CODE" $FNAME
    fi
    
    # Save the color code to clipboard
    if [ "$WAYLAND_DISPLAY" ]; then
        # We are removing the new line char and then sending it to the clipboard
        echo $COLOR_CODE | tr -d "\n" | wl-copy
    else
        echo $COLOR_CODE | tr -d "\n" | xclip -selection c
    fi
    
    # Output the color code to stdout only if the user uses the --stdout flag
    [[ $STDOUT == true ]] && echo $COLOR_CODE
    
    if [ $PREVIEW == true ]; then
        case $IMAGE_VIEWER in
            "mpv")
                mpv --geometry=100x100 --title="Farge" $FNAME &>/dev/null &
                ;;
            "feh")
                feh --geometry=100x100 --title="Farge" $FNAME &>/dev/null &
                ;;
            "sxiv")
                sxiv -g=100x100 -b -N "Farge" $FNAME &>/dev/null &
                ;;
            "imv")
                imv $FNAME -s shrink &>/dev/null &
                ;;
            *)
                # If the image viewer given by the user is not supported by
                # farge, then let the user know
                echo "The image viewer $IMAGE_VIEWER is not supported yet."
                echo "Make an issue requesting your image viewer: https://github.com/sdushantha/farge/issues/new"
                ;;
        esac
    fi
}


while [[ "$1" ]]; do
    case "$1" in
        "--no-preview") PREVIEW=false ;;
        "--no-color-code") WRITE_COLOR_CODE=false ;;
        "--rgb") COLOR_TYPE="rgb" ;;
        "--image-viewer") IMAGE_VIEWER="$2" ;;
        "--stdout") STDOUT=true ;;
        "--version") echo $VERSION && exit ;;
        "--help") show_help && exit ;;
    esac
    shift
done


check_dependencies

# When the user runs farge for the first time, tell them how to exit feh.
# We do with by checking if $MSG exists
[[ ! -f $MSG ]] && echo "To close the color window, click on it and press 'q'" && touch $MSG

# Run the main function where all the magic happens
main
